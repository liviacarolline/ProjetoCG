package main;

import panels.PanelFiltros;
import panels.PanelGatoArnold;
import panels.PanelHistorgrama;
import panels.PanelMenu2D;
import panels.PanelMenu3D;
import panels.PanelMenuCircunferencia;
import panels.PanelMenuFiltros;
import panels.PanelMenuImagem;
import panels.PanelMenuOperacoes;
import panels.PanelMenuRasterizacao;
import panels.PanelMenuRecorteReta;
import panels.PanelMenuSistemaSolar;
import panels.PanelMenuTransformacoes;
import panels.PanelOperacoes;
import panels.PanelPlanoCartesiano;
import panels.PanelTranformacoes;
import retas.Circunferencia;
import retas.Rasterizacao;
import sistemacoordenadas.FuncoesDeNormalizacao;
import transformacoes.Imagem;
import transformacoes.Matriz;
import transformacoes.SistemaSolar;
import transformacoes.Transformacoes2D;
import transformacoes.Transformacoes3D;
import transformacoes.TransformacoesImagem;

import java.awt.Component;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;

import auxiliares.RasterizacaoEnum;

/**
 * Representa a tela inicial da aplicação.
 *
 */
public class App extends javax.swing.JFrame {

    private final PanelMenuRasterizacao panelMenuRasterizacao;
    private final PanelMenuCircunferencia panelMenuCircunferencia;
    private final PanelMenuFiltros panelMenuFiltros;
    private final PanelMenuOperacoes panelMenuOperacoes;
    private final PanelMenuTransformacoes panelMenuTransformacoes;
    private final PanelMenu2D panelMenu2D;
    private final PanelMenu3D panelMenu3D;
    private final PanelMenuImagem panelMenuImagem;
    private final PanelMenuSistemaSolar panelMenuSistemaSolar;
    private final PanelMenuRecorteReta panelMenuRecorteReta;

    private final PanelFiltros panelFiltros;
    private final PanelOperacoes panelOperacoes;
    private final PanelTranformacoes panelTransformacoes;
    private final PanelHistorgrama panelHistograma;
    private final PanelGatoArnold panelArnold;

    /**
     * Construtor
     */
    public App() {
        panelMenuRasterizacao = PanelMenuRasterizacao.getInstance();
        panelMenuCircunferencia = PanelMenuCircunferencia.getInstance();
        panelMenuFiltros = PanelMenuFiltros.getInstance();
        panelMenuOperacoes = PanelMenuOperacoes.getInstance();
        panelMenuTransformacoes = PanelMenuTransformacoes.getInstance();
        panelHistograma = PanelHistorgrama.getInstance();
        panelArnold = PanelGatoArnold.getInstance();
        panelMenu2D = PanelMenu2D.getInstance();
        panelMenu3D = PanelMenu3D.getInstance();
        panelMenuImagem = PanelMenuImagem.getInstance();
        panelMenuSistemaSolar = PanelMenuSistemaSolar.getInstance();
        panelMenuRecorteReta = PanelMenuRecorteReta.getInstance();

        panelFiltros = PanelFiltros.getInstance();
        panelOperacoes = PanelOperacoes.getInstance();
        panelTransformacoes = PanelTranformacoes.getInstance();

        initComponents();
        openMenuReta(null);
        sistemaCoordenadas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        panelMenuLeft = new javax.swing.JPanel();
        panelBox = new javax.swing.JPanel();
        panelFooter = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        labelDCX = new javax.swing.JLabel();
        labelDCY = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        labelNDCY = new javax.swing.JLabel();
        labelNDCX = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        labelX = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        labelY = new javax.swing.JLabel();
        panelPlanoCartesiano = panels.PanelPlanoCartesiano.getInstance();
        labelResTela = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuItemReta = new javax.swing.JMenuItem();
        menuItemCircuferencia = new javax.swing.JMenuItem();
        menuRecorte = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        menuItem2D = new javax.swing.JMenuItem();
        menuItem3D = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        menuSobre = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        menuSobre1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Computação Gráfica - UEPB");
        setExtendedState(6);
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/imagensAsserts/NovoLogo.png")));
        setMinimumSize(new java.awt.Dimension(1080, 720));
        setName("framePrincipal"); // NOI18N
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                actionResized(evt);
            }
        });

        panelMenuLeft.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelMenuLeft.setMinimumSize(new java.awt.Dimension(240, 0));
        panelMenuLeft.setPreferredSize(new java.awt.Dimension(240, 2));

        javax.swing.GroupLayout panelMenuLeftLayout = new javax.swing.GroupLayout(panelMenuLeft);
        panelMenuLeft.setLayout(panelMenuLeftLayout);
        panelMenuLeftLayout.setHorizontalGroup(
            panelMenuLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 238, Short.MAX_VALUE)
        );
        panelMenuLeftLayout.setVerticalGroup(
            panelMenuLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 656, Short.MAX_VALUE)
        );

        panelFooter.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelFooter.setMinimumSize(new java.awt.Dimension(170, 100));
        panelFooter.setPreferredSize(new java.awt.Dimension(170, 327));

        jLabel3.setBackground(new java.awt.Color(34, 139, 34));
        jLabel3.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("<html><h3 align=\"center\">Coordenadas<br/>de Entrada</h3></html>");
        jLabel3.setMinimumSize(new java.awt.Dimension(170, 54));
        jLabel3.setOpaque(true);
        jLabel3.setPreferredSize(new java.awt.Dimension(170, 54));

        jLabel4.setBackground(new java.awt.Color(255, 215, 0));
        jLabel4.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("<html><h3 align=\"center\">Coordenadas<br/>de Saída</h3></html>");
        jLabel4.setMinimumSize(new java.awt.Dimension(170, 54));
        jLabel4.setOpaque(true);
        jLabel4.setPreferredSize(new java.awt.Dimension(170, 54));

        jLabel5.setBackground(new java.awt.Color(0, 0, 255));
        jLabel5.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("<html><h3 align=\"center\">Coordenadas<br/>de Normalização</h3></html>");
        jLabel5.setMinimumSize(new java.awt.Dimension(170, 54));
        jLabel5.setOpaque(true);
        jLabel5.setPreferredSize(new java.awt.Dimension(170, 54));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel1.setText("DCX:");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel2.setText("DCY:");

        labelDCX.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        labelDCX.setText("0");

        labelDCY.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        labelDCY.setText("0");

        jLabel6.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel6.setText("NDCY:");

        labelNDCY.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        labelNDCY.setText("0");

        labelNDCX.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        labelNDCX.setText("0");

        jLabel7.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel7.setText("NDCX:");

        jLabel8.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel8.setText("X:");

        labelX.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        labelX.setText("0");

        jLabel9.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel9.setText("Y:");

        labelY.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        labelY.setText("0");

        javax.swing.GroupLayout panelFooterLayout = new javax.swing.GroupLayout(panelFooter);
        panelFooter.setLayout(panelFooterLayout);
        panelFooterLayout.setHorizontalGroup(
            panelFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFooterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(panelFooterLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(panelFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelFooterLayout.createSequentialGroup()
                                .addGroup(panelFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panelFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelDCY)
                                    .addComponent(labelDCX)))
                            .addGroup(panelFooterLayout.createSequentialGroup()
                                .addGroup(panelFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panelFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelNDCY)
                                    .addComponent(labelNDCX)))
                            .addGroup(panelFooterLayout.createSequentialGroup()
                                .addGroup(panelFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panelFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelY)
                                    .addComponent(labelX))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelFooterLayout.setVerticalGroup(
            panelFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFooterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(labelDCX))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(labelDCY))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(labelNDCX))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(labelNDCY))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(labelX))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(labelY))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelPlanoCartesiano.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelPlanoCartesiano.setPreferredSize(new java.awt.Dimension(550, 550));

        labelResTela.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        labelResTela.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelResTela.setText("Tela: 1920 X 1080");

        javax.swing.GroupLayout panelPlanoCartesianoLayout = new javax.swing.GroupLayout(panelPlanoCartesiano);
        panelPlanoCartesiano.setLayout(panelPlanoCartesianoLayout);
        panelPlanoCartesianoLayout.setHorizontalGroup(
            panelPlanoCartesianoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPlanoCartesianoLayout.createSequentialGroup()
                .addGap(484, 484, 484)
                .addComponent(labelResTela, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelPlanoCartesianoLayout.setVerticalGroup(
            panelPlanoCartesianoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPlanoCartesianoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelResTela)
                .addContainerGap())
        );

        javax.swing.GroupLayout panelBoxLayout = new javax.swing.GroupLayout(panelBox);
        panelBox.setLayout(panelBoxLayout);
        panelBoxLayout.setHorizontalGroup(
            panelBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBoxLayout.createSequentialGroup()
                .addComponent(panelPlanoCartesiano, javax.swing.GroupLayout.DEFAULT_SIZE, 636, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelFooter, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panelBoxLayout.setVerticalGroup(
            panelBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPlanoCartesiano, javax.swing.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE)
            .addComponent(panelFooter, javax.swing.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE)
        );

        menuBar.setPreferredSize(new java.awt.Dimension(104, 40));

        jMenu1.setText("Desenhar");

        menuItemReta.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.SHIFT_MASK));
        menuItemReta.setText("Reta");
        menuItemReta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuReta(evt);
            }
        });
        jMenu1.add(menuItemReta);

        menuItemCircuferencia.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_MASK));
        menuItemCircuferencia.setText("Circuferência");
        menuItemCircuferencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuCircunferencia(evt);
            }
        });
        jMenu1.add(menuItemCircuferencia);

        menuRecorte.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.SHIFT_MASK));
        menuRecorte.setText("Recorte de Reta");
        menuRecorte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuRecorteReta(evt);
            }
        });
        jMenu1.add(menuRecorte);

        menuBar.add(jMenu1);

        jMenu3.setText("Transformações");

        menuItem2D.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.SHIFT_MASK));
        menuItem2D.setText("2D");
        menuItem2D.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openTrans2D(evt);
            }
        });
        jMenu3.add(menuItem2D);

        menuItem3D.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.SHIFT_MASK));
        menuItem3D.setText("3D");
        menuItem3D.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openTrans3D(evt);
            }
        });
        jMenu3.add(menuItem3D);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_4, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem4.setText("Imagem");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openTransImagem(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        menuBar.add(jMenu3);

        jMenu2.setText("Processamento de Imagens");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem1.setText("Filtros");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuFiltros(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem5.setText("Operações");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuOperacoes(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem6.setText("Gato de Arnold ");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuArnold(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem7.setText("Transformação");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuTransformacoes(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuItem8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem8.setText("Equalização/Histograma");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuEqualizacao(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        menuBar.add(jMenu2);

        menuSobre.setText("Outros");

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem3.setText("Sistema Solar");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openSistemaSolar(evt);
            }
        });
        menuSobre.add(jMenuItem3);

        menuBar.add(menuSobre);

//        menuBar.add(menuSobre1);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelMenuLeft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelMenuLeft, javax.swing.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE))
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(1096, 759));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void openMenuReta(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuReta
        panelMenuLeft.setVisible(true);

        if (!panelFooter.isValid()) {
            setDefaultBox();
        } else {
            PanelPlanoCartesiano.getInstance().redesenha();
        }
        changeMenuLeft(panelMenuRasterizacao);
    }//GEN-LAST:event_openMenuReta

    private void openMenuCircunferencia(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuCircunferencia
        panelMenuLeft.setVisible(true);

        if (!panelFooter.isValid()) {
            setDefaultBox();
        } else {
            PanelPlanoCartesiano.getInstance().redesenha();
        }
        changeMenuLeft(panelMenuCircunferencia);
    }//GEN-LAST:event_openMenuCircunferencia

    private void openMenuFiltros(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuFiltros
        /**
         * Removendo os panels que não serïão utilizados
         */
        panelFooter.setVisible(false);
        panelMenuLeft.setVisible(true);
        panelBox.removeAll();

        changePanelCentral(panelFiltros);
        changeMenuLeft(panelMenuFiltros);
    }//GEN-LAST:event_openMenuFiltros

    private void openMenuOperacoes(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuOperacoes
        panelFooter.setVisible(false);
        panelMenuLeft.setVisible(true);
        panelBox.removeAll();

        changePanelCentral(panelOperacoes);
        changeMenuLeft(panelMenuOperacoes);
    }//GEN-LAST:event_openMenuOperacoes

    private void openMenuArnold(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuArnold
        panelFooter.setVisible(false);
        panelMenuLeft.setVisible(false);
        panelBox.removeAll();

        changePanelCentral(panelArnold);
    }//GEN-LAST:event_openMenuArnold

    private void openMenuTransformacoes(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuTransformacoes
        panelFooter.setVisible(false);
        panelMenuLeft.setVisible(true);
        panelBox.removeAll();

        changePanelCentral(panelTransformacoes);
        changeMenuLeft(panelMenuTransformacoes);
    }//GEN-LAST:event_openMenuTransformacoes

    private void openMenuEqualizacao(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuEqualizacao
        panelFooter.setVisible(false);
        panelMenuLeft.setVisible(false);
        panelBox.removeAll();

        changePanelCentral(panelHistograma);
    }//GEN-LAST:event_openMenuEqualizacao

    private void openTrans2D(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openTrans2D
        panelMenuLeft.setVisible(true);

        if (!panelFooter.isValid()) {
            System.out.println("App.openTrans2D()" + " ENTROU!!!");
            setDefaultBox();
        } else {
            PanelPlanoCartesiano.getInstance().redesenha();
        }
        changeMenuLeft(panelMenu2D);
    }//GEN-LAST:event_openTrans2D

    private void openTrans3D(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openTrans3D
        panelMenuLeft.setVisible(true);

        if (!panelFooter.isValid()) {
            setDefaultBox();
        } else {
            PanelPlanoCartesiano.getInstance().redesenha3D();
        }

        changeMenuLeft(panelMenu3D);
    }//GEN-LAST:event_openTrans3D


    private void openSistemaSolar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openSistemaSolar
        panelMenuLeft.setVisible(true);

        if (!panelFooter.isValid()) {
            setDefaultBox();
        }
        changeMenuLeft(panelMenuSistemaSolar);

        SistemaSolar sistemaSolar = new SistemaSolar();
        if (SistemaSolar.threadAnimation != null) {
            SistemaSolar.threadAnimation.stop();
        }
        sistemaSolar.startAnimation();
    }//GEN-LAST:event_openSistemaSolar

    /**
     * Evento disparado toda vez que a tela ï¿½ redimensinada. Seta a resoluï¿½ï¿½oo da
     * tela atual.
     *
     */
    private void actionResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_actionResized
        PanelPlanoCartesiano p = PanelPlanoCartesiano.getInstance();
        labelResTela.setText("Tela: " + p.getLargura() + " X " + p.getAltura());
    }//GEN-LAST:event_actionResized

    private void openTransImagem(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openTransImagem
        try {
            String path = new File("." + File.separator + "external").getCanonicalPath();
            Runtime.getRuntime().exec(path + File.separator + "imagemOpen.exe", null, new File(path));
        } catch (IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_openTransImagem

    private void menuRecorteReta(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuRecorteReta
        panelMenuLeft.setVisible(true);

        if (!panelFooter.isValid()) {
            setDefaultBox();
        } else {
            PanelPlanoCartesiano.getInstance().redesenha();
        }
        changeMenuLeft(panelMenuRecorteReta);
    }//GEN-LAST:event_menuRecorteReta

    /**
     * Altera o jPanel do menu esquerdo de acordo com o jPanel passado como
     * parametro
     *
     * @param panel O jPanel a ser populado
     */
    private void changeMenuLeft(JPanel panel) {
        panelMenuLeft.removeAll();
        panelMenuLeft.repaint();

        panelMenuLeft.setLayout(new GridLayout());
        panelMenuLeft.add(panel);

        panelMenuLeft.validate();
    }

    /**
     * Altera o jPanel do central adicionando o novo componente passado como
     * parametro.
     *
     * @param panel O jPanel a ser populado
     */
    private void changePanelCentral(Component component) {
        javax.swing.GroupLayout panelBoxLayout = new javax.swing.GroupLayout(panelBox);
        panelBox.setLayout(panelBoxLayout);
        panelBoxLayout.setHorizontalGroup(
                panelBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelBoxLayout.createSequentialGroup()
                                .addComponent(component, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
        );
        panelBoxLayout.setVerticalGroup(
                panelBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(component, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }

    /**
     * Coloca o box principal com o layout default
     */
    private void setDefaultBox() {
        if (!panelFooter.isVisible()) {
            panelBox.removeAll();
            System.out.println("App.setDefaultBox()" + "ENTROU TBM<!");
            changePanelCentral(panelPlanoCartesiano);

            javax.swing.GroupLayout panelBoxLayout = new javax.swing.GroupLayout(panelBox);
            panelBox.setLayout(panelBoxLayout);
            panelBoxLayout.setHorizontalGroup(
                    panelBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelBoxLayout.createSequentialGroup()
                                    .addComponent(panelPlanoCartesiano, javax.swing.GroupLayout.DEFAULT_SIZE, 636, Short.MAX_VALUE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(panelFooter, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
            );
            panelBoxLayout.setVerticalGroup(
                    panelBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelPlanoCartesiano, javax.swing.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE)
                            .addComponent(panelFooter, javax.swing.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE)
            );
            panelFooter.setVisible(true);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new App().setVisible(true);
            }
        });
    }

    /**
     * Executa o algoritmo de rasterização da reta
     *
     * @param instance Instancia do PanelMenu que o chamou
     */
    public static void runResult(Object instance) {
        if (instance instanceof PanelMenuRasterizacao) {
            processaRasterizacaoReta(PanelMenuRasterizacao.getInstance());
        } else if (instance instanceof PanelMenuCircunferencia) {
            processaRasterizacaoCircunferencia(PanelMenuCircunferencia.getInstance());
        } else if (instance instanceof PanelMenu2D) {
            processaTransformacoes2D(PanelMenu2D.getInstance());
        } else if (instance instanceof PanelMenu3D) {
            processaTransformacoes3D(PanelMenu3D.getInstance());
        } else if (instance instanceof PanelMenuImagem) {
            processaTransformacoesImagem(PanelMenuImagem.getInstance());
        }
    }

    /**
     * Processa o pedido vindo da tela de rasterização de reta.
     *
     * @param menu
     */
    private static void processaRasterizacaoReta(PanelMenuRasterizacao menu) {
        Rasterizacao rast = Rasterizacao.getInstance();
        PanelPlanoCartesiano.getInstance().redesenha();

        if (menu.getTipoAlgoritimo().equals(RasterizacaoEnum.DDA)) {
            rast.dda(menu.getPontoInicial(), menu.getPontoFinal(), menu.getColor(), menu.getTextAreaResult());
        } else if (menu.getTipoAlgoritimo().equals(RasterizacaoEnum.PONTO_MEDIO)) {
            rast.pontoMedio(menu.getPontoInicial(), menu.getPontoFinal(), menu.getColor(), menu.getTextAreaResult());
        }
    }

    /**
     * Processa o pedido vindo da tela de rasterização de circunferência.
     *
     * @param menu - Possui o getRaio, getColor, getTipoAlgoritimo
     */
    private static void processaRasterizacaoCircunferencia(PanelMenuCircunferencia menu) {
        Circunferencia circ = Circunferencia.getInstance();

        switch (menu.getTipoAlgoritimo()) {
            case PONTO_MEDIO:
                circ.funcaoPontoMedio((int) menu.getRaioX(), menu.getColor());
                break;
            case EQUACAO_EXPLICITA:
                circ.funcaoExplicita((int) menu.getRaioX(), menu.getColor());
                break;
            case TRIGONOMETRIA:
                circ.funcaoTrigonometria((int) menu.getRaioX(), menu.getColor());
                break;
            case ELIPSE:
                circ.funcaoElipse((int) menu.getRaioX(), (int) menu.getRaioY(), menu.getColor());
            default:
                break;
        }
    }

    /**
     * Processa o pedido vindo da tela de transformações 2D.
     *
     * @param menu
     */
    private static void processaTransformacoes2D(PanelMenu2D menu) {
        if (PanelMenu2D.matrizObjeto != null) {
            Transformacoes2D trans2D = Transformacoes2D.getInstance();

            /**
             * Matriz objeto original. Ela é atualizada em cada transformação
             * aplicada.
             */
            double[][] matrizObjeto = PanelMenu2D.matrizObjeto;

            /**
             * Fatores de translação.
             */
            double tx = PanelMenu2D.matrizObjeto[0][0], ty = PanelMenu2D.matrizObjeto[1][0];

            switch (menu.getTipoAlgoritimo()) {
                case TRANSLACAO:
                    // Aplica translação
                    matrizObjeto = trans2D.translacao(matrizObjeto, menu.getValorX(), menu.getValorY());
                    break;
                case ESCALA:
                    // Aplica escala de acordo com Sx e Sy
                    matrizObjeto = trans2D.escala(matrizObjeto, menu.getValorX(), menu.getValorY());
                    break;
                case ROTACAO:
                    // Aplica rotação de acordo com o ângulo
                    matrizObjeto = trans2D.rotacao(matrizObjeto, menu.getAngulo());
                    break;
                case REFLEXAO:
                    // Aplica reflexão de acordo com o eixo selecionado
                    matrizObjeto = trans2D.reflexao(matrizObjeto, menu.getEixo());
                    break;
                case CISALHAMENTO:
                    // Aplica cisalhamento de acordo com o valor de a e b
                    matrizObjeto = trans2D.cisalhamento(matrizObjeto, menu.getValorX(), menu.getValorY());
                    break;
                case COMPOSTA:
                    matrizObjeto = trans2D.composta(menu.listaDeTransformacoes, matrizObjeto);
                    break;
                default:
                    break;
            }

            // Desenha o objeto
            PanelPlanoCartesiano.getInstance().drawObjeto2D(matrizObjeto, menu.getColor());
        }
    }

    /**
     * Processa o pedido vindo da tela de transformações 3D.
     *
     * @param menu
     */
    private static void processaTransformacoes3D(PanelMenu3D menu) {
        if (PanelMenu3D.matrizObjeto3D != null) {
            Transformacoes3D trans3D = Transformacoes3D.getInstance();

            /**
             * Matriz objeto original. Ela é atualizada em cada transformação
             * aplicada.
             */
            double[][] matrizObjeto3D = PanelMenu3D.matrizObjeto3D;

            /**
             * Fatores de translação.
             */
            double tx = PanelMenu3D.matrizObjeto3D[0][0], ty = PanelMenu3D.matrizObjeto3D[1][0];

            switch (menu.getTipoAlgoritimo()) {
                case TRANSLACAO:
                    // Aplica translação
                    matrizObjeto3D = trans3D.translacao(matrizObjeto3D, menu.getValorX(), menu.getValorY(), menu.getValorZ());
                    break;
                case ESCALA:
                    // Aplica escala de acordo com Sx e Sy
                    matrizObjeto3D = trans3D.escala(matrizObjeto3D, menu.getValorX(), menu.getValorY(), menu.getValorZ());
                    break;
                case ROTACAO:
                    // Aplica rotação de acordo com o ângulo
                    matrizObjeto3D = trans3D.rotacao(matrizObjeto3D, menu.getAngulo(), menu.getEixo());
                    break;
                case REFLEXAO:
                    // Aplica reflexão de acordo com o eixo selecionado
                    matrizObjeto3D = trans3D.reflexao(matrizObjeto3D, menu.getEixo());
                    break;
                case CISALHAMENTO:
                    // Aplica cisalhamento de acordo com o valor de a e b
                    matrizObjeto3D = trans3D.cisalhamento(matrizObjeto3D, menu.getValorX(), menu.getAlignmentY(), menu.getEixo());
                    break;
                case COMPOSTA:
                    matrizObjeto3D = trans3D.composta(menu.listaDeTransformacoes, matrizObjeto3D);
                    break;
                default:
                    break;
            }

            // Desenha o objeto
            Matriz.printMatriz(matrizObjeto3D, "Result");

            // Desenha o objeto
            PanelPlanoCartesiano.getInstance().drawObjeto3D(matrizObjeto3D, menu.getColor());
        }
    }

    /**
     * Processa o pedido vindo da tela de transformações 2D.
     *
     * @param menu
     */
    private static void processaTransformacoesImagem(PanelMenuImagem menu) {
        if (PanelMenuImagem.imagem != null) {
            TransformacoesImagem transImg = TransformacoesImagem.getInstance();

            /**
             * Matriz objeto original. Ela é atualizada em cada transformação
             * aplicada.
             */
            Imagem imagem = PanelMenuImagem.imagem;

            /**
             * Fatores de translação.
             */
            switch (menu.getTipoAlgoritimo()) {
                case TRANSLACAO:
                    // Aplica translação
                    transImg.translacao(imagem, menu.getValorX(), menu.getValorY());
                    break;
                case ESCALA:
                    // Aplica escala de acordo com Sx e Sy
                    transImg.escala(imagem, menu.getValorX(), menu.getValorY());
                    break;
                case ROTACAO:
                    // Aplica rotação de acordo com o ângulo
                    transImg.rotacao(imagem, menu.getAngulo());
                    break;
                case REFLEXAO:
                    // Aplica reflexão de acordo com o eixo selecionado
                    transImg.reflexao(imagem, menu.getEixo());
                    break;
                case CISALHAMENTO:
                    // Aplica cisalhamento de acordo com o valor de a e b
                    transImg.cisalhamento(imagem, menu.getValorX(), menu.getValorY());
                    break;
                default:
                    break;
            }

        }
    }

    /**
     * Calcula e exibe o sistema de coordenadas de acordo com os pontos no plano
     * cartesiano O Evento mouseMoved Ã© utilizado para pegar as coordenadas no
     * plano cartesiano
     */
    private void sistemaCoordenadas() {
        panelPlanoCartesiano.addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                super.mouseMoved(e); //To change body of generated methods, choose Tools | Templates.

                // Pega a instancia do Plano Cartesiano
                PanelPlanoCartesiano planoCartesiano = PanelPlanoCartesiano.getInstance();

                // Calcula o dc - Entrada de dispositivo | Será o mesmo que a saída
                int dcx = e.getX() - planoCartesiano.getValorCentroX();
                int dcy = (e.getY() - planoCartesiano.getValorCentroY()) * -1;

                // Calcula o ndc - Normalização do dispositivo
                float ndcx = FuncoesDeNormalizacao.calcularNDCX(planoCartesiano.getLargura(), dcx);
                float ndcy = FuncoesDeNormalizacao.calcularNDCX(planoCartesiano.getAltura(), dcy);

                labelNDCX.setText(String.format("%.6f", ndcx));
                labelNDCY.setText(String.format("%.6f", ndcy));

                labelDCX.setText(String.valueOf(FuncoesDeNormalizacao.calcularDCX(planoCartesiano.getLargura(), ndcx)));
                labelDCY.setText(String.valueOf(FuncoesDeNormalizacao.calcularDCY(planoCartesiano.getAltura(), ndcy)));

                labelX.setText(String.valueOf(Math.round(dcx)));
                labelY.setText(String.valueOf(Math.round(dcy)));
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JLabel labelDCX;
    private javax.swing.JLabel labelDCY;
    private javax.swing.JLabel labelNDCX;
    private javax.swing.JLabel labelNDCY;
    private javax.swing.JLabel labelResTela;
    private javax.swing.JLabel labelX;
    private javax.swing.JLabel labelY;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem menuItem2D;
    private javax.swing.JMenuItem menuItem3D;
    private javax.swing.JMenuItem menuItemCircuferencia;
    private javax.swing.JMenuItem menuItemReta;
    private javax.swing.JMenuItem menuRecorte;
    private javax.swing.JMenu menuSobre;
    private javax.swing.JMenu menuSobre1;
    private javax.swing.JPanel panelBox;
    private javax.swing.JPanel panelFooter;
    private javax.swing.JPanel panelMenuLeft;
    private static javax.swing.JPanel panelPlanoCartesiano;
    // End of variables declaration//GEN-END:variables
}
